This file describes the functions that should be in a module.
Each function should start with the module name.
So if the module is faq.sh the modules should start with faq_ like faq_INIT.

If not mentioned otherwise the function is optional.

modulename_INIT (REQUIERD)
	Called directly after loading the module. No parameters.
	If return code isn't 0 the module is considered as failed to load.
	The module should clean up after itself in this case.
	On STDOUT should be returned a space separated list of functions the 
	module implements. FAQ would return "before_connect on_PRIVMSG"

modulename_before_connect
	If implemented, called before the bot connected.
	No parameters
	Return code not checked.
	Note: This is useful for stuff that needs to echo log messages
	      as that can't be done in modulename_INIT.

modulename_after_connect
	If implemented, called after the bot connected.
	No parameters
	Return code not checked.

modulename_on_PRIVMSG
	Called when bot gets a PRIVMSG
	$1 = from who (n!u@h)
	$2 = to who (channel or botnick)
	$3 = the message
	Return code:
		0 = pass it on to next module
		1 = I have taken care of this, and don't
		    consult other modules about this.

modulename_on_NOTICE
	Called when bot gets a NOTICE
	$1 = from who (n!u@h)
	$2 = to who (channel or botnick)
	$3 = the message
	Return code:
		0 = pass it on to next module
		1 = I have taken care of this, and don't
		    consult other modules about this.

modulename_on_NICK (TODO)
	# :AnMaster!AnMaster@staff.kuonet-ng.org NICK AnMaster_test
	Called when someone changes nick in a channel the bot is in
	$1 = from who (n!u@h)
	$2 = new nick
	Return code not checked.
		Reason: A module with a list of users could get desynced if it didn't
		get the nick change.

modulename_on_JOIN (TODO)
	# :AnMaster!AnMaster@staff.kuonet-ng.org JOIN :#test
	Called when someone joins a channel the bot is in
	$1 = who did it (n!u@h)
	$2 = what channel
	Return code not checked.
		Reason: A module with a list of users could get desynced if it didn't
		get the join.

modulename_on_PART (TODO)
	# :AnMaster!AnMaster@staff.kuonet-ng.org PART #test
	# :AnMaster!AnMaster@staff.kuonet-ng.org PART #test :with a reason
	Called when someone parts a channel the bot is in
	$1 = who did it (n!u@h)
	$2 = what channel
	$3 = a reason if one exists.
	Return code not checked.
		Reason: A module with a list of users could get desynced if it didn't
		get the part.

modulename_on_KICK (TODO)
	# :AnMaster!AnMaster@staff.kuonet-ng.org KICK #test AnMaster_test :this is a test
	# :AnMaster!AnMaster@staff.kuonet-ng.org KICK #test bashbot :another test
	Called when someone parts a channel the bot is in
	$1 = who did it (n!u@h)
	$2 = what channel
	$3 = who got kicked
	$4 = a reason if one exists.
	Return code not checked.
		Reason: A module with a list of users could get desynced if it didn't
		get the kick.

modulename_on_QUIT (TODO)
	# :AnMaster_test!AnMaster@staff.kuonet-ng.org QUIT :Quit: ERC Version 5.2 (IRC client for Emacs)
	Called when someone quits
	$1 = who did it (n!u@h)
	$2 = a reason if one exists.
	Return code not checked.
		Reason: A module with a list of users could get desynced if it didn't
		get the quit.

modulename_on_channel_modechange (TODO)
	# :ChanServ!ChanServ@services.kuonet-ng.org MODE #test +o AnMaster
	# :AnMaster!AnMaster@staff.kuonet-ng.org MODE #test +sk 5
	# :ChanServ!ChanServ@services.kuonet-ng.org MODE #test +nt-k 5
	# :AnMaster!AnMaster@staff.kuonet-ng.org MODE #test -s
	Called when someone changes a mode in the channel
	$1 = who did it (n!u@h)
	$2 = on what channel
	$3 = the mode change with it's parameters.
	Return code not checked.
		Reason: A module with a list of users could get desynced if it didn't
		get the mode change.

modulename_on_server_ERROR (TODO)
	# ERROR :Closing link (rfc3092@2001:16d8:fff2::) [Killed (AnMaster (testing a kill))]
	Called when the bot get an ERROR from the server.
	$1 = the ERROR message.
	Return code not checked.
		Reason: There isn't much point in swallowing this.

modulename_on_RAW
	Called when the bot gets *ANY* line from the server after the inital connect.
	With this a module can hook onto something not supported by a more specific hook.
	The downsides:
	* Potentially speed as it has to be called for any message.
	* You have to parse more on your own.
	* You can desync other modules! Imagine a module that keep a list of
	  users in the channel. If you swallow a message about a join, part,
	  quit, nickchange, or other ones it may get desynced!
	Parameters:
		$1 = The raw line
	Return code:
		0 = pass it on to next module
		1 = I have taken care of this, and don't
		    consult other modules about this.
		    For raw this means no normal hooks
		    will be called on the line either.



